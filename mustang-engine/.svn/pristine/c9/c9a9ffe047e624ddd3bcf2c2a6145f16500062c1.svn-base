from m_engine.engine import *

from m_engine.gamestate import *
from m_engine.gamespace import *
from m_engine.physx import *
from m_engine.scene import *
from m_engine.eng_math import Point2D,Vect2D
import math
from gui.menus import MenuHandler
from gui.hud import HUD

import utils, controls, entities

class Playing(AbstractGameState):
    def __init__(self):
        AbstractGameState.__init__(self)
        self.space = GameSpace()
        self.physx = Physx(self.space)
        self.hud = HUD()

        #Notes: objects that are registered must have a
        #rigidbodycontrol and must be a gameobject or it prints a mean msg
        Engine.player = entities.TestSprite()
        Engine.pcontrol = controls.AdminControl(K_w,K_s,K_a,K_d)
        self.physx.registerObject(Engine.player)

        Engine.otherBlock = entities.TestSprite()
        Engine.otherControl = controls.CharacterControl(K_UP,K_DOWN,K_LEFT,K_RIGHT)
        self.physx.registerObject(Engine.otherBlock)

        Engine.cam1 = Camera(0,0,400,600,self.space)
        Engine.cam2 = Camera(0,0,400,600,self.space)
        Engine.cam2.setWindowLocation(Point2D(400,0))

    def update(self):
        Engine.screen.fill((0,0,0))
        self.space.update()
        self.physx.updatePhysx()
        Camera.update()
        Camera.render(Engine.screen)
        self.hud.update()
        self.hud.render(Engine.screen)

class MustangCannon(AbstractGameState):
    def __init__(self):
        AbstractGameState.__init__(self)
        self.space = GameSpace()
        self.physx = Physx(self.space)
        self.hud = HUD()
        
        Engine.player = entities.TestSprite()
        self.physx.registerObject(Engine.player)
        Engine.playerControl = controls.PlayerControl()

        Engine.cannon = entities.Cannon()
        Engine.cannonControl = controls.CannonControl()

        Engine.camera = Camera(0,0,800,600,self.space)
        Engine.power = 0
        Engine.mustangState = self
        
    def update(self):
        Engine.screen.fill((0,0,0))
        self.space.update()
        self.physx.updatePhysx()
        Camera.update()
        Camera.render(Engine.screen)
        self.hud.update()
        self.hud.render(Engine.screen)

    def triggerPlayer(self):
        self.space.addObject(Engine.player)
        Engine.camera.setFocus(Engine.player)
        ang = Engine.cannon.rotation
        Engine.player.setRotation(ang)
        ang = math.radians(ang)
        v = Vect2D(math.cos(ang),-math.sin(ang))*Engine.power
        Engine.player.move(v)
        

class Menu(AbstractGameState):
    def __init__(self):
        AbstractGameState.__init__(self)
##        self.menu = MenuHandler()
        with open("Assets\menu_config.xml") as f:
            self.menu = MenuHandler(f)
    def update(self):
        self.menu.update()
        self.menu.render(Engine.screen)
